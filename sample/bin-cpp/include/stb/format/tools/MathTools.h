// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_tools_MathTools
#define INCLUDED_stb_format_tools_MathTools

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(stb,format,tools,MathTools)

namespace stb{
namespace format{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES MathTools_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MathTools_obj OBJ_;
		MathTools_obj();

	public:
		enum { _hx_ClassId = 0x1d97e38c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="stb.format.tools.MathTools")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"stb.format.tools.MathTools"); }

		hx::ObjectPtr< MathTools_obj > __new() {
			hx::ObjectPtr< MathTools_obj > __this = new MathTools_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MathTools_obj > __alloc(hx::Ctx *_hx_ctx) {
			MathTools_obj *__this = (MathTools_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MathTools_obj), false, "stb.format.tools.MathTools"));
			*(void **)__this = MathTools_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MathTools_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MathTools","\x13","\x2b","\xed","\x32"); }

		static int ilog(int n);
		static ::Dynamic ilog_dyn();

};

} // end namespace stb
} // end namespace format
} // end namespace tools

#endif /* INCLUDED_stb_format_tools_MathTools */ 
