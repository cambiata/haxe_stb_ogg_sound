// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_tools_Crc32
#define INCLUDED_stb_format_tools_Crc32

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(stb,format,tools,Crc32)

namespace stb{
namespace format{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES Crc32_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Crc32_obj OBJ_;
		Crc32_obj();

	public:
		enum { _hx_ClassId = 0x63f3444c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="stb.format.tools.Crc32")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"stb.format.tools.Crc32"); }

		hx::ObjectPtr< Crc32_obj > __new() {
			hx::ObjectPtr< Crc32_obj > __this = new Crc32_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Crc32_obj > __alloc(hx::Ctx *_hx_ctx) {
			Crc32_obj *__this = (Crc32_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Crc32_obj), false, "stb.format.tools.Crc32"));
			*(void **)__this = Crc32_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Crc32_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Crc32","\x53","\x7c","\x7e","\xdf"); }

		static void __boot();
		static int POLY;
		static ::Array< int > table;
		static void init();
		static ::Dynamic init_dyn();

		static int update(int crc,int byte);
		static ::Dynamic update_dyn();

};

} // end namespace stb
} // end namespace format
} // end namespace tools

#endif /* INCLUDED_stb_format_tools_Crc32 */ 
