// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_vorbis_data_ProbedPage
#define INCLUDED_stb_format_vorbis_data_ProbedPage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_ce8e05864512f20f_16_new)
HX_DECLARE_CLASS4(stb,format,vorbis,data,ProbedPage)

namespace stb{
namespace format{
namespace vorbis{
namespace data{


class HXCPP_CLASS_ATTRIBUTES ProbedPage_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ProbedPage_obj OBJ_;
		ProbedPage_obj();

	public:
		enum { _hx_ClassId = 0x27c84ed8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="stb.format.vorbis.data.ProbedPage")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"stb.format.vorbis.data.ProbedPage"); }

		hx::ObjectPtr< ProbedPage_obj > __new() {
			hx::ObjectPtr< ProbedPage_obj > __this = new ProbedPage_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ProbedPage_obj > __alloc(hx::Ctx *_hx_ctx) {
			ProbedPage_obj *__this = (ProbedPage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ProbedPage_obj), true, "stb.format.vorbis.data.ProbedPage"));
			*(void **)__this = ProbedPage_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_ce8e05864512f20f_16_new)
            	HX_STACK_THIS(__this)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ProbedPage_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ProbedPage","\xc3","\xa3","\x25","\xea"); }

		int pageStart;
		int pageEnd;
		int afterPreviousPageStart;
		 ::Dynamic firstDecodedSample;
		 ::Dynamic lastDecodedSample;
};

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data

#endif /* INCLUDED_stb_format_vorbis_data_ProbedPage */ 
