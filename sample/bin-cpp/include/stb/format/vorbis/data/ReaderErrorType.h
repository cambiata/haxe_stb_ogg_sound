// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_vorbis_data_ReaderErrorType
#define INCLUDED_stb_format_vorbis_data_ReaderErrorType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(stb,format,vorbis,data,ReaderErrorType)
namespace stb{
namespace format{
namespace vorbis{
namespace data{


class ReaderErrorType_obj : public hx::EnumBase_obj
{
	typedef hx::EnumBase_obj super;
		typedef ReaderErrorType_obj OBJ_;

	public:
		ReaderErrorType_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_HCSTRING("stb.format.vorbis.data.ReaderErrorType","\x6c","\x4b","\x9a","\x02"); }
		::String __ToString() const { return HX_HCSTRING("ReaderErrorType.","\x8f","\x36","\xa3","\x71") + _hx_tag; }

		static ::stb::format::vorbis::data::ReaderErrorType BAD_PACKET_TYPE;
		static inline ::stb::format::vorbis::data::ReaderErrorType BAD_PACKET_TYPE_dyn() { return BAD_PACKET_TYPE; }
		static ::stb::format::vorbis::data::ReaderErrorType CANT_FIND_LAST_PAGE;
		static inline ::stb::format::vorbis::data::ReaderErrorType CANT_FIND_LAST_PAGE_dyn() { return CANT_FIND_LAST_PAGE; }
		static ::stb::format::vorbis::data::ReaderErrorType CONTINUED_PACKET_FLAG_INVALID;
		static inline ::stb::format::vorbis::data::ReaderErrorType CONTINUED_PACKET_FLAG_INVALID_dyn() { return CONTINUED_PACKET_FLAG_INVALID; }
		static ::stb::format::vorbis::data::ReaderErrorType FEATURE_NOT_SUPPORTED;
		static inline ::stb::format::vorbis::data::ReaderErrorType FEATURE_NOT_SUPPORTED_dyn() { return FEATURE_NOT_SUPPORTED; }
		static ::stb::format::vorbis::data::ReaderErrorType FILE_OPEN_FAILURE;
		static inline ::stb::format::vorbis::data::ReaderErrorType FILE_OPEN_FAILURE_dyn() { return FILE_OPEN_FAILURE; }
		static ::stb::format::vorbis::data::ReaderErrorType INCORRECT_STREAM_SERIAL_NUMBER;
		static inline ::stb::format::vorbis::data::ReaderErrorType INCORRECT_STREAM_SERIAL_NUMBER_dyn() { return INCORRECT_STREAM_SERIAL_NUMBER; }
		static ::stb::format::vorbis::data::ReaderErrorType INVALID_API_MIXING;
		static inline ::stb::format::vorbis::data::ReaderErrorType INVALID_API_MIXING_dyn() { return INVALID_API_MIXING; }
		static ::stb::format::vorbis::data::ReaderErrorType INVALID_FIRST_PAGE;
		static inline ::stb::format::vorbis::data::ReaderErrorType INVALID_FIRST_PAGE_dyn() { return INVALID_FIRST_PAGE; }
		static ::stb::format::vorbis::data::ReaderErrorType INVALID_SETUP;
		static inline ::stb::format::vorbis::data::ReaderErrorType INVALID_SETUP_dyn() { return INVALID_SETUP; }
		static ::stb::format::vorbis::data::ReaderErrorType INVALID_STREAM;
		static inline ::stb::format::vorbis::data::ReaderErrorType INVALID_STREAM_dyn() { return INVALID_STREAM; }
		static ::stb::format::vorbis::data::ReaderErrorType INVALID_STREAM_STRUCTURE_VERSION;
		static inline ::stb::format::vorbis::data::ReaderErrorType INVALID_STREAM_STRUCTURE_VERSION_dyn() { return INVALID_STREAM_STRUCTURE_VERSION; }
		static ::stb::format::vorbis::data::ReaderErrorType MISSING_CAPTURE_PATTERN;
		static inline ::stb::format::vorbis::data::ReaderErrorType MISSING_CAPTURE_PATTERN_dyn() { return MISSING_CAPTURE_PATTERN; }
		static ::stb::format::vorbis::data::ReaderErrorType NEED_MORE_DATA;
		static inline ::stb::format::vorbis::data::ReaderErrorType NEED_MORE_DATA_dyn() { return NEED_MORE_DATA; }
		static ::stb::format::vorbis::data::ReaderErrorType OTHER;
		static inline ::stb::format::vorbis::data::ReaderErrorType OTHER_dyn() { return OTHER; }
		static ::stb::format::vorbis::data::ReaderErrorType OUTOFMEM;
		static inline ::stb::format::vorbis::data::ReaderErrorType OUTOFMEM_dyn() { return OUTOFMEM; }
		static ::stb::format::vorbis::data::ReaderErrorType SEEK_FAILED;
		static inline ::stb::format::vorbis::data::ReaderErrorType SEEK_FAILED_dyn() { return SEEK_FAILED; }
		static ::stb::format::vorbis::data::ReaderErrorType SEEK_INVALID;
		static inline ::stb::format::vorbis::data::ReaderErrorType SEEK_INVALID_dyn() { return SEEK_INVALID; }
		static ::stb::format::vorbis::data::ReaderErrorType SEEK_WITHOUT_LENGTH;
		static inline ::stb::format::vorbis::data::ReaderErrorType SEEK_WITHOUT_LENGTH_dyn() { return SEEK_WITHOUT_LENGTH; }
		static ::stb::format::vorbis::data::ReaderErrorType TOO_MANY_CHANNELS;
		static inline ::stb::format::vorbis::data::ReaderErrorType TOO_MANY_CHANNELS_dyn() { return TOO_MANY_CHANNELS; }
		static ::stb::format::vorbis::data::ReaderErrorType UNEXPECTED_EOF;
		static inline ::stb::format::vorbis::data::ReaderErrorType UNEXPECTED_EOF_dyn() { return UNEXPECTED_EOF; }
};

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data

#endif /* INCLUDED_stb_format_vorbis_data_ReaderErrorType */ 
