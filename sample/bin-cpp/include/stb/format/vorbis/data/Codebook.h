// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_vorbis_data_Codebook
#define INCLUDED_stb_format_vorbis_data_Codebook

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(stb,format,vorbis,VorbisDecodeState)
HX_DECLARE_CLASS4(stb,format,vorbis,data,Codebook)

namespace stb{
namespace format{
namespace vorbis{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Codebook_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Codebook_obj OBJ_;
		Codebook_obj();

	public:
		enum { _hx_ClassId = 0x2a4d6403 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="stb.format.vorbis.data.Codebook")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"stb.format.vorbis.data.Codebook"); }
		static hx::ObjectPtr< Codebook_obj > __new();
		static hx::ObjectPtr< Codebook_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Codebook_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Codebook","\xf6","\x8b","\x46","\x64"); }

		static void __boot();
		static int NO_CODE;
		static  ::stb::format::vorbis::data::Codebook read( ::stb::format::vorbis::VorbisDecodeState decodeState);
		static ::Dynamic read_dyn();

		static int delay;
		int dimensions;
		int entries;
		::Array< int > codewordLengths;
		Float minimumValue;
		Float deltaValue;
		int valueBits;
		int lookupType;
		bool sequenceP;
		bool sparse;
		int lookupValues;
		::Array< Float > multiplicands;
		::Array< int > codewords;
		::Array< int > fastHuffman;
		::Array< int > sortedCodewords;
		::Array< int > sortedValues;
		int sortedEntries;
		void addEntry(int huffCode,int symbol,int count,int len,::Array< int > values);
		::Dynamic addEntry_dyn();

		bool includeInSort(int len);
		::Dynamic includeInSort_dyn();

		bool computeCodewords(::Array< int > len,int n,::Array< int > values);
		::Dynamic computeCodewords_dyn();

		void computeSortedHuffman(::Array< int > lengths,::Array< int > values);
		::Dynamic computeSortedHuffman_dyn();

		void computeAcceleratedHuffman();
		::Dynamic computeAcceleratedHuffman_dyn();

		bool codebookDecode( ::stb::format::vorbis::VorbisDecodeState decodeState,::Array< Float > output,int offset,int len);
		::Dynamic codebookDecode_dyn();

		bool codebookDecodeStep( ::stb::format::vorbis::VorbisDecodeState decodeState,::Array< Float > output,int offset,int len,int step);
		::Dynamic codebookDecodeStep_dyn();

		int decodeStart( ::stb::format::vorbis::VorbisDecodeState decodeState);
		::Dynamic decodeStart_dyn();

		 ::Dynamic decodeDeinterleaveRepeat( ::stb::format::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> residueBuffers,int ch,int cInter,int pInter,int len,int totalDecode);
		::Dynamic decodeDeinterleaveRepeat_dyn();

		bool residueDecode( ::stb::format::vorbis::VorbisDecodeState decodeState,::Array< Float > target,int offset,int n,int rtype);
		::Dynamic residueDecode_dyn();

};

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data

#endif /* INCLUDED_stb_format_vorbis_data_Codebook */ 
