// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_vorbis_data_ReaderError
#define INCLUDED_stb_format_vorbis_data_ReaderError

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(stb,format,vorbis,data,ReaderError)
HX_DECLARE_CLASS4(stb,format,vorbis,data,ReaderErrorType)

namespace stb{
namespace format{
namespace vorbis{
namespace data{


class HXCPP_CLASS_ATTRIBUTES ReaderError_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ReaderError_obj OBJ_;
		ReaderError_obj();

	public:
		enum { _hx_ClassId = 0x1d7e42b0 };

		void __construct( ::stb::format::vorbis::data::ReaderErrorType type,::String __o_message, ::Dynamic posInfos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="stb.format.vorbis.data.ReaderError")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"stb.format.vorbis.data.ReaderError"); }
		static hx::ObjectPtr< ReaderError_obj > __new( ::stb::format::vorbis::data::ReaderErrorType type,::String __o_message, ::Dynamic posInfos);
		static hx::ObjectPtr< ReaderError_obj > __alloc(hx::Ctx *_hx_ctx, ::stb::format::vorbis::data::ReaderErrorType type,::String __o_message, ::Dynamic posInfos);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ReaderError_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ReaderError","\x65","\x3b","\xcb","\x6c"); }

		 ::stb::format::vorbis::data::ReaderErrorType type;
		::String message;
		 ::Dynamic posInfos;
};

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data

#endif /* INCLUDED_stb_format_vorbis_data_ReaderError */ 
