// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#ifndef INCLUDED_stb_format_vorbis_VorbisDecoder
#define INCLUDED_stb_format_vorbis_VorbisDecoder

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Input)
HX_DECLARE_CLASS2(haxe,io,Output)
HX_DECLARE_CLASS3(stb,format,vorbis,VorbisDecodeState)
HX_DECLARE_CLASS3(stb,format,vorbis,VorbisDecoder)
HX_DECLARE_CLASS4(stb,format,vorbis,data,Header)

namespace stb{
namespace format{
namespace vorbis{


class HXCPP_CLASS_ATTRIBUTES VorbisDecoder_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef VorbisDecoder_obj OBJ_;
		VorbisDecoder_obj();

	public:
		enum { _hx_ClassId = 0x29b27daa };

		void __construct( ::stb::format::vorbis::data::Header header, ::stb::format::vorbis::VorbisDecodeState decodeState);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="stb.format.vorbis.VorbisDecoder")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"stb.format.vorbis.VorbisDecoder"); }
		static hx::ObjectPtr< VorbisDecoder_obj > __new( ::stb::format::vorbis::data::Header header, ::stb::format::vorbis::VorbisDecodeState decodeState);
		static hx::ObjectPtr< VorbisDecoder_obj > __alloc(hx::Ctx *_hx_ctx, ::stb::format::vorbis::data::Header header, ::stb::format::vorbis::VorbisDecodeState decodeState);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VorbisDecoder_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("VorbisDecoder","\x51","\x00","\xfb","\xde"); }

		static  ::stb::format::vorbis::VorbisDecoder start( ::haxe::io::Input input);
		static ::Dynamic start_dyn();

		::Array< ::Dynamic> previousWindow;
		int previousLength;
		::Array< ::Dynamic> finalY;
		::Array< ::Dynamic> a;
		::Array< ::Dynamic> b;
		::Array< ::Dynamic> c;
		::Array< ::Dynamic> window;
		::Array< ::Dynamic> bitReverseData;
		::Array< ::Dynamic> channelBuffers;
		int channelBufferStart;
		int channelBufferEnd;
		 ::stb::format::vorbis::data::Header header;
		int currentSample;
		 ::Dynamic totalSample;
		 ::stb::format::vorbis::VorbisDecodeState decodeState;
		int read( ::haxe::io::Output output,int samples,int channels,int sampleRate,bool useFloat);
		::Dynamic read_dyn();

		int skipSamples(int len);
		::Dynamic skipSamples_dyn();

		void setupSampleNumber( ::Dynamic seekFunc,int inputLength);
		::Dynamic setupSampleNumber_dyn();

		void seek( ::Dynamic seekFunc,int inputLength,int sampleNumber);
		::Dynamic seek_dyn();

		void seekFrameFromPage( ::Dynamic seekFunc,int pageStart,int firstSample,int targetSample);
		::Dynamic seekFrameFromPage_dyn();

		 ::stb::format::vorbis::VorbisDecoder clone( ::Dynamic seekFunc);
		::Dynamic clone_dyn();

		void ensurePosition( ::Dynamic seekFunc);
		::Dynamic ensurePosition_dyn();

		int getFrameFloat();
		::Dynamic getFrameFloat_dyn();

		void pumpFirstFrame();
		::Dynamic pumpFirstFrame_dyn();

		int finishFrame( ::Dynamic r);
		::Dynamic finishFrame_dyn();

		::Array< Float > getWindow(int len);
		::Dynamic getWindow_dyn();

		void initBlocksize(int bs,int n);
		::Dynamic initBlocksize_dyn();

		void inverseMdct(::Array< Float > buffer,int n,bool blocktype);
		::Dynamic inverseMdct_dyn();

		 ::Dynamic decodePacket();
		::Dynamic decodePacket_dyn();

		 ::Dynamic decodeInitial();
		::Dynamic decodeInitial_dyn();

		 ::Dynamic decodePacketRest( ::Dynamic r);
		::Dynamic decodePacketRest_dyn();

};

} // end namespace stb
} // end namespace format
} // end namespace vorbis

#endif /* INCLUDED_stb_format_vorbis_VorbisDecoder */ 
