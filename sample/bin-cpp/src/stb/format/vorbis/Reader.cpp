// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_stb_format_vorbis_Reader
#include <stb/format/vorbis/Reader.h>
#endif
#ifndef INCLUDED_stb_format_vorbis_VorbisDecoder
#include <stb/format/vorbis/VorbisDecoder.h>
#endif
#ifndef INCLUDED_stb_format_vorbis_data_Comment
#include <stb/format/vorbis/data/Comment.h>
#endif
#ifndef INCLUDED_stb_format_vorbis_data_Header
#include <stb/format/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif
#ifndef INCLUDED_sys_io_FileSeek
#include <sys/io/FileSeek.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_76_new,"stb.format.vorbis.Reader","new",0x7ec0ed86,"stb.format.vorbis.Reader.new","stb/format/vorbis/Reader.hx",76,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_34_get_header,"stb.format.vorbis.Reader","get_header",0xfb24ecf0,"stb.format.vorbis.Reader.get_header","stb/format/vorbis/Reader.hx",34,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_39_get_totalSample,"stb.format.vorbis.Reader","get_totalSample",0xbb1948cb,"stb.format.vorbis.Reader.get_totalSample","stb/format/vorbis/Reader.hx",39,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_45_get_totalMillisecond,"stb.format.vorbis.Reader","get_totalMillisecond",0x1191fb00,"stb.format.vorbis.Reader.get_totalMillisecond","stb/format/vorbis/Reader.hx",45,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_50_get_currentSample,"stb.format.vorbis.Reader","get_currentSample",0xa8b68040,"stb.format.vorbis.Reader.get_currentSample","stb/format/vorbis/Reader.hx",50,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_53_set_currentSample,"stb.format.vorbis.Reader","set_currentSample",0xcc24584c,"stb.format.vorbis.Reader.set_currentSample","stb/format/vorbis/Reader.hx",53,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_62_get_currentMillisecond,"stb.format.vorbis.Reader","get_currentMillisecond",0x136e9b6b,"stb.format.vorbis.Reader.get_currentMillisecond","stb/format/vorbis/Reader.hx",62,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_65_set_currentMillisecond,"stb.format.vorbis.Reader","set_currentMillisecond",0x471a17df,"stb.format.vorbis.Reader.set_currentMillisecond","stb/format/vorbis/Reader.hx",65,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_114_read,"stb.format.vorbis.Reader","read",0x6cb3af70,"stb.format.vorbis.Reader.read","stb/format/vorbis/Reader.hx",114,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_129_clone,"stb.format.vorbis.Reader","clone",0x122e4603,"stb.format.vorbis.Reader.clone","stb/format/vorbis/Reader.hx",129,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_141_sampleToMillisecond,"stb.format.vorbis.Reader","sampleToMillisecond",0x5be2b022,"stb.format.vorbis.Reader.sampleToMillisecond","stb/format/vorbis/Reader.hx",141,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_145_millisecondToSample,"stb.format.vorbis.Reader","millisecondToSample",0x7626818c,"stb.format.vorbis.Reader.millisecondToSample","stb/format/vorbis/Reader.hx",145,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_87_openFromBytes,"stb.format.vorbis.Reader","openFromBytes",0x89c14e1d,"stb.format.vorbis.Reader.openFromBytes","stb/format/vorbis/Reader.hx",87,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_85_openFromBytes,"stb.format.vorbis.Reader","openFromBytes",0x89c14e1d,"stb.format.vorbis.Reader.openFromBytes","stb/format/vorbis/Reader.hx",85,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_91_seekBytes,"stb.format.vorbis.Reader","seekBytes",0x7d169d79,"stb.format.vorbis.Reader.seekBytes","stb/format/vorbis/Reader.hx",91,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_98_openFromFile,"stb.format.vorbis.Reader","openFromFile",0xa63a450a,"stb.format.vorbis.Reader.openFromFile","stb/format/vorbis/Reader.hx",98,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_95_openFromFile,"stb.format.vorbis.Reader","openFromFile",0xa63a450a,"stb.format.vorbis.Reader.openFromFile","stb/format/vorbis/Reader.hx",95,0x15eecea9)
HX_DEFINE_STACK_FRAME(_hx_pos_0abf6937cb59dd35_102_readAll,"stb.format.vorbis.Reader","readAll",0x3bbd4791,"stb.format.vorbis.Reader.readAll","stb/format/vorbis/Reader.hx",102,0x15eecea9)
namespace stb{
namespace format{
namespace vorbis{

void Reader_obj::__construct( ::haxe::io::Input input, ::Dynamic seekFunc,int inputLength){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_76_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(input,"input")
            	HX_STACK_ARG(seekFunc,"seekFunc")
            	HX_STACK_ARG(inputLength,"inputLength")
HXLINE(  77)		this->seekFunc = seekFunc;
HXLINE(  78)		this->inputLength = inputLength;
HXLINE(  79)		this->decoder = ::stb::format::vorbis::VorbisDecoder_obj::start(input);
HXLINE(  80)		this->decoder->setupSampleNumber(seekFunc,inputLength);
HXLINE(  81)		this->loopStart = this->get_header()->comment->get_loopStart();
HXLINE(  82)		this->loopLength = this->get_header()->comment->get_loopLength();
            	}

Dynamic Reader_obj::__CreateEmpty() { return new Reader_obj; }

void *Reader_obj::_hx_vtable = 0;

Dynamic Reader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reader_obj > _hx_result = new Reader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Reader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x053f20ce;
}

 ::stb::format::vorbis::data::Header Reader_obj::get_header(){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_34_get_header)
            	HX_STACK_THIS(this)
HXLINE(  34)		return this->decoder->header;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_header,return )

int Reader_obj::get_totalSample(){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_39_get_totalSample)
            	HX_STACK_THIS(this)
HXLINE(  39)		return this->decoder->totalSample;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_totalSample,return )

Float Reader_obj::get_totalMillisecond(){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_45_get_totalMillisecond)
            	HX_STACK_THIS(this)
HXLINE(  45)		int samples = this->decoder->totalSample;
HXDLIN(  45)		Float _hx_tmp;
HXDLIN(  45)		if ((samples < (int)0)) {
HXLINE(  45)			_hx_tmp = (((Float)4294967296.0) + samples);
            		}
            		else {
HXLINE(  45)			_hx_tmp = (samples + ((Float)0.0));
            		}
HXDLIN(  45)		HX_VARI_NAME( int,_hx_int,"int") = this->get_header()->sampleRate;
HXDLIN(  45)		Float _hx_tmp1;
HXDLIN(  45)		if ((_hx_int < (int)0)) {
HXLINE(  45)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  45)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  45)		return (((Float)_hx_tmp / (Float)_hx_tmp1) * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_totalMillisecond,return )

int Reader_obj::get_currentSample(){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_50_get_currentSample)
            	HX_STACK_THIS(this)
HXLINE(  50)		return this->decoder->currentSample;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_currentSample,return )

int Reader_obj::set_currentSample(int value){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_53_set_currentSample)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  54)		this->decoder->seek(this->seekFunc,this->inputLength,value);
HXLINE(  55)		return this->decoder->currentSample;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,set_currentSample,return )

Float Reader_obj::get_currentMillisecond(){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_62_get_currentMillisecond)
            	HX_STACK_THIS(this)
HXLINE(  62)		int samples = this->get_currentSample();
HXDLIN(  62)		Float _hx_tmp;
HXDLIN(  62)		if ((samples < (int)0)) {
HXLINE(  62)			_hx_tmp = (((Float)4294967296.0) + samples);
            		}
            		else {
HXLINE(  62)			_hx_tmp = (samples + ((Float)0.0));
            		}
HXDLIN(  62)		HX_VARI_NAME( int,_hx_int,"int") = this->get_header()->sampleRate;
HXDLIN(  62)		Float _hx_tmp1;
HXDLIN(  62)		if ((_hx_int < (int)0)) {
HXLINE(  62)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  62)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  62)		return (((Float)_hx_tmp / (Float)_hx_tmp1) * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,get_currentMillisecond,return )

Float Reader_obj::set_currentMillisecond(Float value){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_65_set_currentMillisecond)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  66)		HX_VARI_NAME( int,_hx_int,"int") = this->get_header()->sampleRate;
HXDLIN(  66)		Float _hx_tmp;
HXDLIN(  66)		if ((_hx_int < (int)0)) {
HXLINE(  66)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  66)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  66)		this->set_currentSample(::Math_obj::floor((_hx_tmp * ((Float)value / (Float)(int)1000))));
HXLINE(  67)		return this->get_currentMillisecond();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,set_currentMillisecond,return )

int Reader_obj::read( ::haxe::io::Output output, ::Dynamic samples, ::Dynamic channels, ::Dynamic sampleRate,hx::Null< bool >  __o_useFloat){
bool useFloat = __o_useFloat.Default(false);
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_114_read)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(samples,"samples")
            	HX_STACK_ARG(channels,"channels")
            	HX_STACK_ARG(sampleRate,"sampleRate")
            	HX_STACK_ARG(useFloat,"useFloat")
HXLINE( 115)		this->decoder->ensurePosition(this->seekFunc);
HXLINE( 117)		if (hx::IsNull( samples )) {
HXLINE( 118)			samples = this->decoder->totalSample;
            		}
HXLINE( 120)		if (hx::IsNull( channels )) {
HXLINE( 121)			channels = this->get_header()->channel;
            		}
HXLINE( 123)		if (hx::IsNull( sampleRate )) {
HXLINE( 124)			sampleRate = this->get_header()->sampleRate;
            		}
HXLINE( 126)		return this->decoder->read(output,samples,channels,sampleRate,useFloat);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Reader_obj,read,return )

 ::stb::format::vorbis::Reader Reader_obj::clone(){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_129_clone)
            	HX_STACK_THIS(this)
HXLINE( 130)		HX_VARI(  ::stb::format::vorbis::Reader,reader) = ( ( ::stb::format::vorbis::Reader)(::Type_obj::createEmptyInstance(hx::ClassOf< ::stb::format::vorbis::Reader >())) );
HXLINE( 131)		reader->seekFunc = this->seekFunc;
HXLINE( 132)		reader->inputLength = this->inputLength;
HXLINE( 133)		reader->decoder = this->decoder->clone(this->seekFunc);
HXLINE( 134)		reader->loopStart = this->loopStart;
HXLINE( 135)		reader->loopLength = this->loopLength;
HXLINE( 136)		return reader;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Reader_obj,clone,return )

Float Reader_obj::sampleToMillisecond(int samples){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_141_sampleToMillisecond)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(samples,"samples")
HXLINE( 141)		Float _hx_tmp;
HXDLIN( 141)		if ((samples < (int)0)) {
HXLINE( 141)			_hx_tmp = (((Float)4294967296.0) + samples);
            		}
            		else {
HXLINE( 141)			_hx_tmp = (samples + ((Float)0.0));
            		}
HXDLIN( 141)		HX_VARI_NAME( int,_hx_int,"int") = this->get_header()->sampleRate;
HXDLIN( 141)		Float _hx_tmp1;
HXDLIN( 141)		if ((_hx_int < (int)0)) {
HXLINE( 141)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 141)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 141)		return (((Float)_hx_tmp / (Float)_hx_tmp1) * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,sampleToMillisecond,return )

int Reader_obj::millisecondToSample(Float millseconds){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_145_millisecondToSample)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(millseconds,"millseconds")
HXLINE( 145)		HX_VARI_NAME( int,_hx_int,"int") = this->get_header()->sampleRate;
HXDLIN( 145)		Float _hx_tmp;
HXDLIN( 145)		if ((_hx_int < (int)0)) {
HXLINE( 145)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 145)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 145)		return ::Math_obj::floor((_hx_tmp * ((Float)millseconds / (Float)(int)1000)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,millisecondToSample,return )

 ::stb::format::vorbis::Reader Reader_obj::openFromBytes( ::haxe::io::Bytes bytes){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::io::BytesInput,a1) HXARGC(1)
            		void _hx_run(int a2){
            			HX_GC_STACKFRAME(&_hx_pos_0abf6937cb59dd35_87_openFromBytes)
            			HX_STACK_ARG(a2,"a2")
HXLINE(  87)			::stb::format::vorbis::Reader_obj::seekBytes(a1,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0abf6937cb59dd35_85_openFromBytes)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(  86)		HX_VARI(  ::haxe::io::BytesInput,input) =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,bytes,null(),null());
HXLINE(  87)		 ::haxe::io::BytesInput a1 = input;
HXDLIN(  87)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1));
HXDLIN(  87)		return  ::stb::format::vorbis::Reader_obj::__alloc( HX_CTX ,input,_hx_tmp,bytes->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,openFromBytes,return )

void Reader_obj::seekBytes( ::haxe::io::BytesInput bytes,int pos){
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_91_seekBytes)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  91)		bytes->set_position(pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reader_obj,seekBytes,(void))

 ::stb::format::vorbis::Reader Reader_obj::openFromFile(::String fileName){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		void _hx_run(int p){
            			HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_98_openFromFile)
            			HX_STACK_ARG(p,"p")
HXLINE(  98)			f(p,::sys::io::FileSeek_obj::SeekBegin_dyn());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0abf6937cb59dd35_95_openFromFile)
            	HX_STACK_ARG(fileName,"fileName")
HXLINE(  96)		HX_VARI(  ::sys::io::FileInput,file) = ::sys::io::File_obj::read(fileName,true);
HXLINE(  98)		 ::Dynamic f = file->seek_dyn();
HXDLIN(  98)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f));
HXDLIN(  98)		return  ::stb::format::vorbis::Reader_obj::__alloc( HX_CTX ,file,_hx_tmp, ::Dynamic(::sys::FileSystem_obj::stat(fileName)->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reader_obj,openFromFile,return )

 ::stb::format::vorbis::data::Header Reader_obj::readAll( ::haxe::io::Input input, ::haxe::io::Output output,hx::Null< bool >  __o_useFloat){
bool useFloat = __o_useFloat.Default(false);
            	HX_STACKFRAME(&_hx_pos_0abf6937cb59dd35_102_readAll)
            	HX_STACK_ARG(input,"input")
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(useFloat,"useFloat")
HXLINE( 103)		HX_VARI(  ::stb::format::vorbis::VorbisDecoder,decoder) = ::stb::format::vorbis::VorbisDecoder_obj::start(input);
HXLINE( 104)		HX_VARI(  ::stb::format::vorbis::data::Header,header) = decoder->header;
HXLINE( 106)		while((decoder->read(output,(int)65536,header->channel,header->sampleRate,useFloat) != (int)0)){
            		}
HXLINE( 111)		return decoder->header;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reader_obj,readAll,return )


hx::ObjectPtr< Reader_obj > Reader_obj::__new( ::haxe::io::Input input, ::Dynamic seekFunc,int inputLength) {
	hx::ObjectPtr< Reader_obj > __this = new Reader_obj();
	__this->__construct(input,seekFunc,inputLength);
	return __this;
}

hx::ObjectPtr< Reader_obj > Reader_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Input input, ::Dynamic seekFunc,int inputLength) {
	Reader_obj *__this = (Reader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Reader_obj), true, "stb.format.vorbis.Reader"));
	*(void **)__this = Reader_obj::_hx_vtable;
	__this->__construct(input,seekFunc,inputLength);
	return __this;
}

Reader_obj::Reader_obj()
{
}

void Reader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Reader);
	HX_MARK_MEMBER_NAME(decoder,"decoder");
	HX_MARK_MEMBER_NAME(loopStart,"loopStart");
	HX_MARK_MEMBER_NAME(loopLength,"loopLength");
	HX_MARK_MEMBER_NAME(seekFunc,"seekFunc");
	HX_MARK_MEMBER_NAME(inputLength,"inputLength");
	HX_MARK_END_CLASS();
}

void Reader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(decoder,"decoder");
	HX_VISIT_MEMBER_NAME(loopStart,"loopStart");
	HX_VISIT_MEMBER_NAME(loopLength,"loopLength");
	HX_VISIT_MEMBER_NAME(seekFunc,"seekFunc");
	HX_VISIT_MEMBER_NAME(inputLength,"inputLength");
}

hx::Val Reader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_header()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"decoder") ) { return hx::Val( decoder); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seekFunc") ) { return hx::Val( seekFunc); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopStart") ) { return hx::Val( loopStart); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_header") ) { return hx::Val( get_header_dyn()); }
		if (HX_FIELD_EQ(inName,"loopLength") ) { return hx::Val( loopLength); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalSample") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_totalSample()); }
		if (HX_FIELD_EQ(inName,"inputLength") ) { return hx::Val( inputLength); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentSample") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentSample()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_totalSample") ) { return hx::Val( get_totalSample_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"totalMillisecond") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_totalMillisecond()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_currentSample") ) { return hx::Val( get_currentSample_dyn()); }
		if (HX_FIELD_EQ(inName,"set_currentSample") ) { return hx::Val( set_currentSample_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentMillisecond") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentMillisecond()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sampleToMillisecond") ) { return hx::Val( sampleToMillisecond_dyn()); }
		if (HX_FIELD_EQ(inName,"millisecondToSample") ) { return hx::Val( millisecondToSample_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_totalMillisecond") ) { return hx::Val( get_totalMillisecond_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_currentMillisecond") ) { return hx::Val( get_currentMillisecond_dyn()); }
		if (HX_FIELD_EQ(inName,"set_currentMillisecond") ) { return hx::Val( set_currentMillisecond_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Reader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"readAll") ) { outValue = readAll_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"seekBytes") ) { outValue = seekBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"openFromFile") ) { outValue = openFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"openFromBytes") ) { outValue = openFromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val Reader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"decoder") ) { decoder=inValue.Cast<  ::stb::format::vorbis::VorbisDecoder >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seekFunc") ) { seekFunc=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopStart") ) { loopStart=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loopLength") ) { loopLength=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputLength") ) { inputLength=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentSample") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentSample(inValue) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentMillisecond") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentMillisecond(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Reader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("decoder","\x84","\x2b","\xc4","\xea"));
	outFields->push(HX_HCSTRING("header","\x8d","\x09","\x00","\xfd"));
	outFields->push(HX_HCSTRING("totalSample","\x0e","\x53","\x80","\xe3"));
	outFields->push(HX_HCSTRING("totalMillisecond","\xdd","\xdd","\x4f","\x6f"));
	outFields->push(HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00"));
	outFields->push(HX_HCSTRING("currentMillisecond","\x88","\xaf","\x90","\xc6"));
	outFields->push(HX_HCSTRING("loopStart","\x5e","\x93","\xb7","\xb1"));
	outFields->push(HX_HCSTRING("loopLength","\x6a","\x92","\xf6","\x67"));
	outFields->push(HX_HCSTRING("inputLength","\x90","\x70","\x3b","\x94"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Reader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::stb::format::vorbis::VorbisDecoder*/ ,(int)offsetof(Reader_obj,decoder),HX_HCSTRING("decoder","\x84","\x2b","\xc4","\xea")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Reader_obj,loopStart),HX_HCSTRING("loopStart","\x5e","\x93","\xb7","\xb1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Reader_obj,loopLength),HX_HCSTRING("loopLength","\x6a","\x92","\xf6","\x67")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Reader_obj,seekFunc),HX_HCSTRING("seekFunc","\xdc","\xb8","\x2a","\x46")},
	{hx::fsInt,(int)offsetof(Reader_obj,inputLength),HX_HCSTRING("inputLength","\x90","\x70","\x3b","\x94")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Reader_obj_sStaticStorageInfo = 0;
#endif

static ::String Reader_obj_sMemberFields[] = {
	HX_HCSTRING("decoder","\x84","\x2b","\xc4","\xea"),
	HX_HCSTRING("get_header","\x56","\x79","\x87","\xed"),
	HX_HCSTRING("get_totalSample","\xa5","\x0a","\x62","\xa4"),
	HX_HCSTRING("get_totalMillisecond","\xe6","\x42","\xba","\x8d"),
	HX_HCSTRING("get_currentSample","\x9a","\xec","\x16","\x07"),
	HX_HCSTRING("set_currentSample","\xa6","\xc4","\x84","\x2a"),
	HX_HCSTRING("get_currentMillisecond","\xd1","\x28","\x25","\x20"),
	HX_HCSTRING("set_currentMillisecond","\x45","\xa5","\xd0","\x53"),
	HX_HCSTRING("loopStart","\x5e","\x93","\xb7","\xb1"),
	HX_HCSTRING("loopLength","\x6a","\x92","\xf6","\x67"),
	HX_HCSTRING("seekFunc","\xdc","\xb8","\x2a","\x46"),
	HX_HCSTRING("inputLength","\x90","\x70","\x3b","\x94"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("sampleToMillisecond","\xfc","\x66","\x7a","\x64"),
	HX_HCSTRING("millisecondToSample","\x66","\x38","\xbe","\x7e"),
	::String(null()) };

static void Reader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Reader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Reader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Reader_obj::__mClass,"__mClass");
};

#endif

hx::Class Reader_obj::__mClass;

static ::String Reader_obj_sStaticFields[] = {
	HX_HCSTRING("openFromBytes","\x77","\x05","\xea","\x8d"),
	HX_HCSTRING("seekBytes","\xd3","\x1f","\x46","\xd4"),
	HX_HCSTRING("openFromFile","\xf0","\x36","\xa5","\xdf"),
	HX_HCSTRING("readAll","\x6b","\x9f","\xc3","\x02"),
	::String(null())
};

void Reader_obj::__register()
{
	hx::Object *dummy = new Reader_obj;
	Reader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("stb.format.vorbis.Reader","\x94","\x72","\x96","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reader_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Reader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reader_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Reader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Reader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Reader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stb
} // end namespace format
} // end namespace vorbis
