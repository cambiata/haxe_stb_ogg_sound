// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_stb_format_vorbis_VorbisTools
#include <stb/format/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_stb_format_vorbis_data_IntPoint
#include <stb/format/vorbis/data/IntPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_90_assert,"stb.format.vorbis.VorbisTools","assert",0x1b73d77d,"stb.format.vorbis.VorbisTools.assert","stb/format/vorbis/VorbisTools.hx",90,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_99_neighbors,"stb.format.vorbis.VorbisTools","neighbors",0xb2b95aea,"stb.format.vorbis.VorbisTools.neighbors","stb/format/vorbis/VorbisTools.hx",99,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_116_floatUnpack,"stb.format.vorbis.VorbisTools","floatUnpack",0xd91cac57,"stb.format.vorbis.VorbisTools.floatUnpack","stb/format/vorbis/VorbisTools.hx",116,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_126_bitReverse,"stb.format.vorbis.VorbisTools","bitReverse",0x4dfbc40c,"stb.format.vorbis.VorbisTools.bitReverse","stb/format/vorbis/VorbisTools.hx",126,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_135_pointCompare,"stb.format.vorbis.VorbisTools","pointCompare",0x32212a2c,"stb.format.vorbis.VorbisTools.pointCompare","stb/format/vorbis/VorbisTools.hx",135,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_139_uintAsc,"stb.format.vorbis.VorbisTools","uintAsc",0x52c87f20,"stb.format.vorbis.VorbisTools.uintAsc","stb/format/vorbis/VorbisTools.hx",139,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_149_lookup1Values,"stb.format.vorbis.VorbisTools","lookup1Values",0x58e537e2,"stb.format.vorbis.VorbisTools.lookup1Values","stb/format/vorbis/VorbisTools.hx",149,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_161_computeWindow,"stb.format.vorbis.VorbisTools","computeWindow",0xfed3c6f0,"stb.format.vorbis.VorbisTools.computeWindow","stb/format/vorbis/VorbisTools.hx",161,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_169_square,"stb.format.vorbis.VorbisTools","square",0x28629154,"stb.format.vorbis.VorbisTools.square","stb/format/vorbis/VorbisTools.hx",169,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_173_computeBitReverse,"stb.format.vorbis.VorbisTools","computeBitReverse",0x400bbed5,"stb.format.vorbis.VorbisTools.computeBitReverse","stb/format/vorbis/VorbisTools.hx",173,0x390fbde8)
static const int _hx_array_data_6eb05ed7_13[] = {
	(int)0,(int)1,(int)2,(int)2,(int)3,(int)3,(int)3,(int)3,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,
};
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_183_computeTwiddleFactors,"stb.format.vorbis.VorbisTools","computeTwiddleFactors",0xf59b9705,"stb.format.vorbis.VorbisTools.computeTwiddleFactors","stb/format/vorbis/VorbisTools.hx",183,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_206_drawLine,"stb.format.vorbis.VorbisTools","drawLine",0x555c2e8f,"stb.format.vorbis.VorbisTools.drawLine","stb/format/vorbis/VorbisTools.hx",206,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_265_predictPoint,"stb.format.vorbis.VorbisTools","predictPoint",0x802f366e,"stb.format.vorbis.VorbisTools.predictPoint","stb/format/vorbis/VorbisTools.hx",265,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_281_emptyFloatVector,"stb.format.vorbis.VorbisTools","emptyFloatVector",0xb9204169,"stb.format.vorbis.VorbisTools.emptyFloatVector","stb/format/vorbis/VorbisTools.hx",281,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_284_copyVector,"stb.format.vorbis.VorbisTools","copyVector",0xa66ece8f,"stb.format.vorbis.VorbisTools.copyVector","stb/format/vorbis/VorbisTools.hx",284,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_16_boot,"stb.format.vorbis.VorbisTools","boot",0x937fa929,"stb.format.vorbis.VorbisTools.boot","stb/format/vorbis/VorbisTools.hx",16,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_18_boot,"stb.format.vorbis.VorbisTools","boot",0x937fa929,"stb.format.vorbis.VorbisTools.boot","stb/format/vorbis/VorbisTools.hx",18,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_20_boot,"stb.format.vorbis.VorbisTools","boot",0x937fa929,"stb.format.vorbis.VorbisTools.boot","stb/format/vorbis/VorbisTools.hx",20,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_21_boot,"stb.format.vorbis.VorbisTools","boot",0x937fa929,"stb.format.vorbis.VorbisTools.boot","stb/format/vorbis/VorbisTools.hx",21,0x390fbde8)
HX_DEFINE_STACK_FRAME(_hx_pos_a11af0717ffb7ee1_23_boot,"stb.format.vorbis.VorbisTools","boot",0x937fa929,"stb.format.vorbis.VorbisTools.boot","stb/format/vorbis/VorbisTools.hx",23,0x390fbde8)
static const Float _hx_array_data_6eb05ed7_30[] = {
	1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0,
};
namespace stb{
namespace format{
namespace vorbis{

void VorbisTools_obj::__construct() { }

Dynamic VorbisTools_obj::__CreateEmpty() { return new VorbisTools_obj; }

void *VorbisTools_obj::_hx_vtable = 0;

Dynamic VorbisTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VorbisTools_obj > _hx_result = new VorbisTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VorbisTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2983de5d;
}

int VorbisTools_obj::EOP;

::Array< ::Dynamic> VorbisTools_obj::integerDivideTable;

Float VorbisTools_obj::M__PI;

int VorbisTools_obj::DIVTAB_NUMER;

int VorbisTools_obj::DIVTAB_DENOM;

::Array< Float > VorbisTools_obj::INVERSE_DB_TABLE;

void VorbisTools_obj::_hx_assert(bool b, ::Dynamic p){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_90_assert)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(p,"p")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,_hx_assert,(void))

 ::Dynamic VorbisTools_obj::neighbors(::Array< int > x,int n){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_99_neighbors)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(n,"n")
HXLINE( 100)		HX_VARI( int,low) = (int)-1;
HXLINE( 101)		HX_VARI( int,high) = (int)65536;
HXLINE( 102)		HX_VARI( int,plow) = (int)0;
HXLINE( 103)		HX_VARI( int,phigh) = (int)0;
HXLINE( 105)		{
HXLINE( 105)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 105)			while((_g1 < n)){
HXLINE( 105)				_g1 = (_g1 + (int)1);
HXDLIN( 105)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 106)				bool _hx_tmp;
HXDLIN( 106)				if ((( (int)(_hx_array_unsafe_get(x,i)) ) > low)) {
HXLINE( 106)					int _hx_tmp1 = ( (int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 106)					_hx_tmp = (_hx_tmp1 < ( (int)(_hx_array_unsafe_get(x,n)) ));
            				}
            				else {
HXLINE( 106)					_hx_tmp = false;
            				}
HXDLIN( 106)				if (_hx_tmp) {
HXLINE( 106)					plow = i;
HXDLIN( 106)					low = ( (int)(_hx_array_unsafe_get(x,i)) );
            				}
HXLINE( 107)				bool _hx_tmp2;
HXDLIN( 107)				if ((( (int)(_hx_array_unsafe_get(x,i)) ) < high)) {
HXLINE( 107)					int _hx_tmp3 = ( (int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 107)					_hx_tmp2 = (_hx_tmp3 > ( (int)(_hx_array_unsafe_get(x,n)) ));
            				}
            				else {
HXLINE( 107)					_hx_tmp2 = false;
            				}
HXDLIN( 107)				if (_hx_tmp2) {
HXLINE( 107)					phigh = i;
HXDLIN( 107)					high = ( (int)(_hx_array_unsafe_get(x,i)) );
            				}
            			}
            		}
HXLINE( 109)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("low",94,54,52,00),plow)
            			->setFixed(1,HX_("high",62,37,0e,45),phigh));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,neighbors,return )

Float VorbisTools_obj::floatUnpack(int x){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_116_floatUnpack)
            	HX_STACK_ARG(x,"x")
HXLINE( 118)		HX_VAR( Float,mantissa);
HXDLIN( 118)		HX_VARI_NAME( int,_hx_int,"int") = ((int)x & (int)(int)2097151);
HXDLIN( 118)		if ((_hx_int < (int)0)) {
HXLINE( 118)			mantissa = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 118)			mantissa = (_hx_int + ((Float)0.0));
            		}
HXLINE( 121)		HX_VAR( Float,res);
HXDLIN( 121)		if ((((int)x & (int)(int)-2147483648) != (int)0)) {
HXLINE( 121)			res = -(mantissa);
            		}
            		else {
HXLINE( 121)			res = mantissa;
            		}
HXLINE( 122)		return (res * ::Math_obj::pow((int)2,(hx::UShr(((int)x & (int)(int)2145386496),(int)21) - (int)788)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VorbisTools_obj,floatUnpack,return )

int VorbisTools_obj::bitReverse(int n){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_126_bitReverse)
            	HX_STACK_ARG(n,"n")
HXLINE( 127)		n = ((int)hx::UShr(((int)n & (int)(int)-1431655766),(int)1) | (int)((int)((int)n & (int)(int)1431655765) << (int)(int)1));
HXLINE( 128)		n = ((int)hx::UShr(((int)n & (int)(int)-858993460),(int)2) | (int)((int)((int)n & (int)(int)858993459) << (int)(int)2));
HXLINE( 129)		n = ((int)hx::UShr(((int)n & (int)(int)-252645136),(int)4) | (int)((int)((int)n & (int)(int)252645135) << (int)(int)4));
HXLINE( 130)		n = ((int)hx::UShr(((int)n & (int)(int)-16711936),(int)8) | (int)((int)((int)n & (int)(int)16711935) << (int)(int)8));
HXLINE( 131)		return ((int)hx::UShr(n,(int)16) | (int)((int)n << (int)(int)16));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VorbisTools_obj,bitReverse,return )

int VorbisTools_obj::pointCompare( ::stb::format::vorbis::data::IntPoint a, ::stb::format::vorbis::data::IntPoint b){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_135_pointCompare)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 135)		if ((a->x < b->x)) {
HXLINE( 135)			return (int)-1;
            		}
            		else {
HXLINE( 135)			if ((a->x > b->x)) {
HXLINE( 135)				return (int)1;
            			}
            			else {
HXLINE( 135)				return (int)0;
            			}
            		}
HXDLIN( 135)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,pointCompare,return )

int VorbisTools_obj::uintAsc(int a,int b){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_139_uintAsc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 139)		HX_VARI( bool,aNeg) = (b < (int)0);
HXDLIN( 139)		bool _hx_tmp;
HXDLIN( 139)		if ((aNeg != (a < (int)0))) {
HXLINE( 139)			_hx_tmp = aNeg;
            		}
            		else {
HXLINE( 139)			_hx_tmp = (b > a);
            		}
HXDLIN( 139)		if (_hx_tmp) {
HXLINE( 139)			return (int)-1;
            		}
            		else {
HXLINE( 141)			if ((a == b)) {
HXLINE( 139)				return (int)0;
            			}
            			else {
HXLINE( 139)				return (int)1;
            			}
            		}
HXDLIN( 139)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,uintAsc,return )

int VorbisTools_obj::lookup1Values(int entries,int dim){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_149_lookup1Values)
            	HX_STACK_ARG(entries,"entries")
            	HX_STACK_ARG(dim,"dim")
HXLINE( 150)		HX_VARI( int,r) = ::Std_obj::_hx_int(::Math_obj::exp(((Float)::Math_obj::log(entries) / (Float)dim)));
HXLINE( 151)		if ((::Std_obj::_hx_int(::Math_obj::pow((r + (int)1),dim)) <= entries)) {
HXLINE( 152)			r = (r + (int)1);
            		}
HXLINE( 156)		::Std_obj::_hx_int(::Math_obj::pow(r,dim));
HXLINE( 157)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,lookup1Values,return )

void VorbisTools_obj::computeWindow(int n,::Array< Float > window){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_161_computeWindow)
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(window,"window")
HXLINE( 162)		HX_VARI( int,n2) = ((int)n >> (int)(int)1);
HXLINE( 163)		{
HXLINE( 163)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 163)			while((_g1 < n2)){
HXLINE( 163)				_g1 = (_g1 + (int)1);
HXDLIN( 163)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 164)				window->__unsafe_set(i,::Math_obj::sin((((Float)1.5707963267948966) * ::stb::format::vorbis::VorbisTools_obj::square(::Math_obj::sin(((((Float)(i + ((Float)0.5)) / (Float)n2) * ((Float)0.5)) * ((Float)3.14159265358979323846264)))))));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,computeWindow,(void))

Float VorbisTools_obj::square(Float f){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_169_square)
            	HX_STACK_ARG(f,"f")
HXLINE( 169)		return (f * f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VorbisTools_obj,square,return )

void VorbisTools_obj::computeBitReverse(int n,::Array< int > rev){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_173_computeBitReverse)
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(rev,"rev")
HXLINE( 174)		HX_VARI( ::Array< int >,log2_4) = ::Array_obj< int >::fromData( _hx_array_data_6eb05ed7_13,16);
HXDLIN( 174)		int ld;
HXDLIN( 174)		if ((n < (int)16384)) {
HXLINE( 174)			if ((n < (int)16)) {
HXLINE( 174)				ld = log2_4->__get(n);
            			}
            			else {
HXLINE( 174)				if ((n < (int)512)) {
HXLINE( 174)					ld = ((int)5 + log2_4->__get(((int)n >> (int)(int)5)));
            				}
            				else {
HXLINE( 174)					ld = ((int)10 + log2_4->__get(((int)n >> (int)(int)10)));
            				}
            			}
            		}
            		else {
HXLINE( 174)			if ((n < (int)16777216)) {
HXLINE( 174)				if ((n < (int)524288)) {
HXLINE( 174)					ld = ((int)15 + log2_4->__get(((int)n >> (int)(int)15)));
            				}
            				else {
HXLINE( 174)					ld = ((int)20 + log2_4->__get(((int)n >> (int)(int)20)));
            				}
            			}
            			else {
HXLINE( 174)				if ((n < (int)536870912)) {
HXLINE( 174)					ld = ((int)25 + log2_4->__get(((int)n >> (int)(int)25)));
            				}
            				else {
HXLINE( 174)					if ((n < (int)-2147483648)) {
HXLINE( 174)						ld = ((int)30 + log2_4->__get(((int)n >> (int)(int)30)));
            					}
            					else {
HXLINE( 174)						ld = (int)0;
            					}
            				}
            			}
            		}
HXDLIN( 174)		HX_VARI_NAME( int,ld1,"ld") = (ld - (int)1);
HXLINE( 175)		HX_VARI( int,n8) = ((int)n >> (int)(int)3);
HXLINE( 177)		{
HXLINE( 177)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 177)			while((_g1 < n8)){
HXLINE( 177)				_g1 = (_g1 + (int)1);
HXDLIN( 177)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 178)				{
HXLINE( 178)					HX_VARI_NAME( int,n1,"n") = i;
HXDLIN( 178)					n1 = ((int)hx::UShr(((int)n1 & (int)(int)-1431655766),(int)1) | (int)((int)((int)n1 & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 178)					n1 = ((int)hx::UShr(((int)n1 & (int)(int)-858993460),(int)2) | (int)((int)((int)n1 & (int)(int)858993459) << (int)(int)2));
HXDLIN( 178)					n1 = ((int)hx::UShr(((int)n1 & (int)(int)-252645136),(int)4) | (int)((int)((int)n1 & (int)(int)252645135) << (int)(int)4));
HXDLIN( 178)					n1 = ((int)hx::UShr(((int)n1 & (int)(int)-16711936),(int)8) | (int)((int)((int)n1 & (int)(int)16711935) << (int)(int)8));
HXDLIN( 178)					rev->__unsafe_set(i,((int)hx::UShr(((int)hx::UShr(n1,(int)16) | (int)((int)n1 << (int)(int)16)),(((int)32 - ld1) + (int)3)) << (int)(int)2));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VorbisTools_obj,computeBitReverse,(void))

void VorbisTools_obj::computeTwiddleFactors(int n,::Array< Float > af,::Array< Float > bf,::Array< Float > cf){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_183_computeTwiddleFactors)
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(af,"af")
            	HX_STACK_ARG(bf,"bf")
            	HX_STACK_ARG(cf,"cf")
HXLINE( 184)		HX_VARI( int,n4) = ((int)n >> (int)(int)2);
HXLINE( 185)		HX_VARI( int,n8) = ((int)n >> (int)(int)3);
HXLINE( 187)		HX_VARI( int,k2) = (int)0;
HXLINE( 188)		{
HXLINE( 188)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 188)			while((_g1 < n4)){
HXLINE( 188)				_g1 = (_g1 + (int)1);
HXDLIN( 188)				HX_VARI( int,k) = (_g1 - (int)1);
HXLINE( 189)				af->__unsafe_set(k2,::Math_obj::cos(((Float)(((int)4 * k) * ((Float)3.14159265358979323846264)) / (Float)n)));
HXLINE( 190)				af->__unsafe_set((k2 + (int)1),-(::Math_obj::sin(((Float)(((int)4 * k) * ((Float)3.14159265358979323846264)) / (Float)n))));
HXLINE( 191)				bf->__unsafe_set(k2,(::Math_obj::cos(((Float)((Float)((k2 + (int)1) * ((Float)3.14159265358979323846264)) / (Float)n) / (Float)(int)2)) * ((Float)0.5)));
HXLINE( 192)				bf->__unsafe_set((k2 + (int)1),(::Math_obj::sin(((Float)((Float)((k2 + (int)1) * ((Float)3.14159265358979323846264)) / (Float)n) / (Float)(int)2)) * ((Float)0.5)));
HXLINE( 193)				k2 = (k2 + (int)2);
            			}
            		}
HXLINE( 196)		HX_VARI_NAME( int,k21,"k2") = (int)0;
HXLINE( 197)		{
HXLINE( 197)			HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 197)			while((_g11 < n8)){
HXLINE( 197)				_g11 = (_g11 + (int)1);
HXLINE( 198)				cf->__unsafe_set(k21,::Math_obj::cos(((Float)(((int)2 * (k21 + (int)1)) * ((Float)3.14159265358979323846264)) / (Float)n)));
HXLINE( 199)				cf->__unsafe_set((k21 + (int)1),-(::Math_obj::sin(((Float)(((int)2 * (k21 + (int)1)) * ((Float)3.14159265358979323846264)) / (Float)n))));
HXLINE( 200)				k21 = (k21 + (int)2);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(VorbisTools_obj,computeTwiddleFactors,(void))

void VorbisTools_obj::drawLine(::Array< Float > output,int x0,int y0,int x1,int y1,int n){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_206_drawLine)
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(n,"n")
HXLINE( 207)		if (hx::IsNull( ::stb::format::vorbis::VorbisTools_obj::integerDivideTable )) {
HXLINE( 208)			::stb::format::vorbis::VorbisTools_obj::integerDivideTable = ::Array_obj< ::Dynamic>::__new((int)32);
HXLINE( 209)			{
HXLINE( 209)				HX_VARI( int,_g) = (int)0;
HXDLIN( 209)				while((_g < (int)32)){
HXLINE( 209)					_g = (_g + (int)1);
HXDLIN( 209)					HX_VARI( int,i) = (_g - (int)1);
HXLINE( 210)					{
HXLINE( 210)						::Array< ::Dynamic> this1 = ::stb::format::vorbis::VorbisTools_obj::integerDivideTable;
HXDLIN( 210)						HX_VARI_NAME( ::Array< int >,this2,"this") = ::Array_obj< int >::__new((int)64);
HXDLIN( 210)						this1->__unsafe_set(i,this2);
            					}
HXLINE( 211)					{
HXLINE( 211)						HX_VARI( int,_g1) = (int)1;
HXDLIN( 211)						while((_g1 < (int)64)){
HXLINE( 211)							_g1 = (_g1 + (int)1);
HXDLIN( 211)							HX_VARI( int,j) = (_g1 - (int)1);
HXLINE( 212)							{
HXLINE( 212)								::Array< int > this3 = ( (::Array< int >)(_hx_array_unsafe_get(::stb::format::vorbis::VorbisTools_obj::integerDivideTable,i)) );
HXDLIN( 212)								int val = ::Std_obj::_hx_int(((Float)i / (Float)j));
HXDLIN( 212)								this3->__unsafe_set(j,val);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 217)		HX_VARI( int,dy) = (y1 - y0);
HXLINE( 218)		HX_VARI( int,adx) = (x1 - x0);
HXLINE( 219)		HX_VAR( int,ady);
HXDLIN( 219)		if ((dy < (int)0)) {
HXLINE( 219)			ady = -(dy);
            		}
            		else {
HXLINE( 219)			ady = dy;
            		}
HXLINE( 220)		HX_VAR( int,base);
HXLINE( 222)		HX_VARI( int,y) = y0;
HXLINE( 223)		HX_VARI( int,err) = (int)0;
HXLINE( 224)		HX_VAR( int,sy);
HXDLIN( 224)		bool sy1;
HXDLIN( 224)		if ((adx < (int)64)) {
HXLINE( 224)			sy1 = (ady < (int)32);
            		}
            		else {
HXLINE( 224)			sy1 = false;
            		}
HXDLIN( 224)		if (sy1) {
HXLINE( 225)			if ((dy < (int)0)) {
HXLINE( 226)				base = -(( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(::stb::format::vorbis::VorbisTools_obj::integerDivideTable,ady)) ),adx)) ));
HXLINE( 224)				sy = (base - (int)1);
            			}
            			else {
HXLINE( 229)				base = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(::stb::format::vorbis::VorbisTools_obj::integerDivideTable,ady)) ),adx)) );
HXLINE( 224)				sy = (base + (int)1);
            			}
            		}
            		else {
HXLINE( 233)			base = ::Std_obj::_hx_int(((Float)dy / (Float)adx));
HXLINE( 234)			if ((dy < (int)0)) {
HXLINE( 224)				sy = (base - (int)1);
            			}
            			else {
HXLINE( 224)				sy = (base + (int)1);
            			}
            		}
HXLINE( 240)		int ady1;
HXDLIN( 240)		if ((base < (int)0)) {
HXLINE( 240)			ady1 = -(base);
            		}
            		else {
HXLINE( 240)			ady1 = base;
            		}
HXDLIN( 240)		ady = (ady - (ady1 * adx));
HXLINE( 241)		if ((x1 > n)) {
HXLINE( 242)			x1 = n;
            		}
HXLINE( 245)		{
HXLINE( 245)			HX_VARI_NAME( Float,val1,"val") = ( (Float)(_hx_array_unsafe_get(output,x0)) );
HXDLIN( 245)			output->__unsafe_set(x0,(val1 * ::stb::format::vorbis::VorbisTools_obj::INVERSE_DB_TABLE->__get(y0)));
            		}
HXLINE( 247)		{
HXLINE( 247)			HX_VARI_NAME( int,_g11,"_g1") = (x0 + (int)1);
HXDLIN( 247)			HX_VARI_NAME( int,_g2,"_g") = x1;
HXDLIN( 247)			while((_g11 < _g2)){
HXLINE( 247)				_g11 = (_g11 + (int)1);
HXDLIN( 247)				HX_VARI_NAME( int,i1,"i") = (_g11 - (int)1);
HXLINE( 248)				err = (err + ady);
HXLINE( 249)				if ((err >= adx)) {
HXLINE( 250)					err = (err - adx);
HXLINE( 251)					y = (y + sy);
            				}
            				else {
HXLINE( 253)					y = (y + base);
            				}
HXLINE( 255)				{
HXLINE( 255)					HX_VARI_NAME( Float,val2,"val") = ( (Float)(_hx_array_unsafe_get(output,i1)) );
HXDLIN( 255)					output->__unsafe_set(i1,(val2 * ::stb::format::vorbis::VorbisTools_obj::INVERSE_DB_TABLE->__get(y)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(VorbisTools_obj,drawLine,(void))

int VorbisTools_obj::predictPoint(int x,int x0,int x1,int y0,int y1){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_265_predictPoint)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(y1,"y1")
HXLINE( 266)		HX_VARI( int,dy) = (y1 - y0);
HXLINE( 270)		HX_VARI( int,off) = ::Std_obj::_hx_int(((Float)(::Math_obj::abs(dy) * (x - x0)) / (Float)(x1 - x0)));
HXLINE( 271)		if ((dy < (int)0)) {
HXLINE( 271)			return (y0 - off);
            		}
            		else {
HXLINE( 271)			return (y0 + off);
            		}
HXDLIN( 271)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(VorbisTools_obj,predictPoint,return )

::Array< Float > VorbisTools_obj::emptyFloatVector(int len){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_281_emptyFloatVector)
            	HX_STACK_ARG(len,"len")
HXLINE( 281)		return ::Array_obj< Float >::__new(len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VorbisTools_obj,emptyFloatVector,return )

::Array< Float > VorbisTools_obj::copyVector(::Array< Float > source){
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_284_copyVector)
            	HX_STACK_ARG(source,"source")
HXLINE( 285)		HX_VARI( ::Array< Float >,dest) = ::Array_obj< Float >::__new(source->length);
HXLINE( 286)		{
HXLINE( 286)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 286)			HX_VARI( int,_g) = source->length;
HXDLIN( 286)			while((_g1 < _g)){
HXLINE( 286)				_g1 = (_g1 + (int)1);
HXDLIN( 286)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 287)				{
HXLINE( 287)					Float val = ( (Float)(_hx_array_unsafe_get(source,i)) );
HXDLIN( 287)					dest->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 289)		return dest;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VorbisTools_obj,copyVector,return )


VorbisTools_obj::VorbisTools_obj()
{
}

bool VorbisTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"assert") ) { outValue = _hx_assert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"square") ) { outValue = square_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"uintAsc") ) { outValue = uintAsc_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawLine") ) { outValue = drawLine_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"neighbors") ) { outValue = neighbors_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitReverse") ) { outValue = bitReverse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyVector") ) { outValue = copyVector_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"floatUnpack") ) { outValue = floatUnpack_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pointCompare") ) { outValue = pointCompare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"predictPoint") ) { outValue = predictPoint_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lookup1Values") ) { outValue = lookup1Values_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeWindow") ) { outValue = computeWindow_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"INVERSE_DB_TABLE") ) { outValue = INVERSE_DB_TABLE; return true; }
		if (HX_FIELD_EQ(inName,"emptyFloatVector") ) { outValue = emptyFloatVector_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeBitReverse") ) { outValue = computeBitReverse_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"integerDivideTable") ) { outValue = integerDivideTable; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"computeTwiddleFactors") ) { outValue = computeTwiddleFactors_dyn(); return true; }
	}
	return false;
}

bool VorbisTools_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"INVERSE_DB_TABLE") ) { INVERSE_DB_TABLE=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"integerDivideTable") ) { integerDivideTable=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *VorbisTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo VorbisTools_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &VorbisTools_obj::EOP,HX_HCSTRING("EOP","\xa6","\xa0","\x34","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &VorbisTools_obj::integerDivideTable,HX_HCSTRING("integerDivideTable","\xb7","\x98","\xdc","\x01")},
	{hx::fsFloat,(void *) &VorbisTools_obj::M__PI,HX_HCSTRING("M__PI","\xe6","\x4b","\xee","\x94")},
	{hx::fsInt,(void *) &VorbisTools_obj::DIVTAB_NUMER,HX_HCSTRING("DIVTAB_NUMER","\xf8","\x57","\x6a","\x62")},
	{hx::fsInt,(void *) &VorbisTools_obj::DIVTAB_DENOM,HX_HCSTRING("DIVTAB_DENOM","\xf0","\xeb","\xd5","\x95")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &VorbisTools_obj::INVERSE_DB_TABLE,HX_HCSTRING("INVERSE_DB_TABLE","\xfc","\x8a","\x40","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void VorbisTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VorbisTools_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(VorbisTools_obj::EOP,"EOP");
	HX_MARK_MEMBER_NAME(VorbisTools_obj::integerDivideTable,"integerDivideTable");
	HX_MARK_MEMBER_NAME(VorbisTools_obj::M__PI,"M__PI");
	HX_MARK_MEMBER_NAME(VorbisTools_obj::DIVTAB_NUMER,"DIVTAB_NUMER");
	HX_MARK_MEMBER_NAME(VorbisTools_obj::DIVTAB_DENOM,"DIVTAB_DENOM");
	HX_MARK_MEMBER_NAME(VorbisTools_obj::INVERSE_DB_TABLE,"INVERSE_DB_TABLE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VorbisTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::EOP,"EOP");
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::integerDivideTable,"integerDivideTable");
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::M__PI,"M__PI");
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::DIVTAB_NUMER,"DIVTAB_NUMER");
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::DIVTAB_DENOM,"DIVTAB_DENOM");
	HX_VISIT_MEMBER_NAME(VorbisTools_obj::INVERSE_DB_TABLE,"INVERSE_DB_TABLE");
};

#endif

hx::Class VorbisTools_obj::__mClass;

static ::String VorbisTools_obj_sStaticFields[] = {
	HX_HCSTRING("EOP","\xa6","\xa0","\x34","\x00"),
	HX_HCSTRING("integerDivideTable","\xb7","\x98","\xdc","\x01"),
	HX_HCSTRING("M__PI","\xe6","\x4b","\xee","\x94"),
	HX_HCSTRING("DIVTAB_NUMER","\xf8","\x57","\x6a","\x62"),
	HX_HCSTRING("DIVTAB_DENOM","\xf0","\xeb","\xd5","\x95"),
	HX_HCSTRING("INVERSE_DB_TABLE","\xfc","\x8a","\x40","\xc6"),
	HX_HCSTRING("assert","\xc6","\x46","\x03","\x4c"),
	HX_HCSTRING("neighbors","\x41","\xdf","\x79","\x94"),
	HX_HCSTRING("floatUnpack","\x6e","\x34","\x48","\x0f"),
	HX_HCSTRING("bitReverse","\xd5","\x0b","\xaf","\xf4"),
	HX_HCSTRING("pointCompare","\x35","\xb6","\x0c","\x62"),
	HX_HCSTRING("uintAsc","\xb7","\x6f","\xba","\x9f"),
	HX_HCSTRING("lookup1Values","\xb9","\x33","\x14","\x17"),
	HX_HCSTRING("computeWindow","\xc7","\xc2","\x02","\xbd"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("computeBitReverse","\x2c","\xf2","\xfa","\x0b"),
	HX_HCSTRING("computeTwiddleFactors","\xdc","\xc1","\x7c","\x6c"),
	HX_HCSTRING("drawLine","\x18","\xc2","\x1c","\x5c"),
	HX_HCSTRING("predictPoint","\x77","\xc2","\x1a","\xb0"),
	HX_HCSTRING("emptyFloatVector","\xf2","\x05","\x5d","\x02"),
	HX_HCSTRING("copyVector","\x58","\x16","\x22","\x4d"),
	::String(null())
};

void VorbisTools_obj::__register()
{
	hx::Object *dummy = new VorbisTools_obj;
	VorbisTools_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("stb.format.vorbis.VorbisTools","\xd7","\x5e","\xb0","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VorbisTools_obj::__GetStatic;
	__mClass->mSetStaticField = &VorbisTools_obj::__SetStatic;
	__mClass->mMarkFunc = VorbisTools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VorbisTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< VorbisTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VorbisTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VorbisTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VorbisTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VorbisTools_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_16_boot)
HXLINE(  16)		EOP = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_18_boot)
HXLINE(  18)		M__PI = ((Float)3.14159265358979323846264);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_20_boot)
HXLINE(  20)		DIVTAB_NUMER = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_21_boot)
HXLINE(  21)		DIVTAB_DENOM = (int)64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a11af0717ffb7ee1_23_boot)
HXLINE(  23)		INVERSE_DB_TABLE = ::Array_obj< Float >::fromData( _hx_array_data_6eb05ed7_30,256);
            	}
}

} // end namespace stb
} // end namespace format
} // end namespace vorbis
