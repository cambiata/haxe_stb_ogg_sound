// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#include <hxcpp.h>

#ifndef INCLUDED_stb_format_vorbis_data_PageFlag
#include <stb/format/vorbis/data/PageFlag.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b839a4ecc9292a24_57_boot,"stb.format.vorbis.data.PageFlag","boot",0x5b6c5132,"stb.format.vorbis.data.PageFlag.boot","stb/format/vorbis/data/Page.hx",57,0x030ce2dc)
HX_DEFINE_STACK_FRAME(_hx_pos_b839a4ecc9292a24_58_boot,"stb.format.vorbis.data.PageFlag","boot",0x5b6c5132,"stb.format.vorbis.data.PageFlag.boot","stb/format/vorbis/data/Page.hx",58,0x030ce2dc)
HX_DEFINE_STACK_FRAME(_hx_pos_b839a4ecc9292a24_59_boot,"stb.format.vorbis.data.PageFlag","boot",0x5b6c5132,"stb.format.vorbis.data.PageFlag.boot","stb/format/vorbis/data/Page.hx",59,0x030ce2dc)
namespace stb{
namespace format{
namespace vorbis{
namespace data{

void PageFlag_obj::__construct() { }

Dynamic PageFlag_obj::__CreateEmpty() { return new PageFlag_obj; }

void *PageFlag_obj::_hx_vtable = 0;

Dynamic PageFlag_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PageFlag_obj > _hx_result = new PageFlag_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PageFlag_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x744fed90;
}

int PageFlag_obj::CONTINUED_PACKET;

int PageFlag_obj::FIRST_PAGE;

int PageFlag_obj::LAST_PAGE;


PageFlag_obj::PageFlag_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PageFlag_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PageFlag_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &PageFlag_obj::CONTINUED_PACKET,HX_HCSTRING("CONTINUED_PACKET","\xca","\x14","\x58","\x3c")},
	{hx::fsInt,(void *) &PageFlag_obj::FIRST_PAGE,HX_HCSTRING("FIRST_PAGE","\x1e","\xd4","\xef","\x06")},
	{hx::fsInt,(void *) &PageFlag_obj::LAST_PAGE,HX_HCSTRING("LAST_PAGE","\x18","\xb4","\x0d","\x1f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PageFlag_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PageFlag_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PageFlag_obj::CONTINUED_PACKET,"CONTINUED_PACKET");
	HX_MARK_MEMBER_NAME(PageFlag_obj::FIRST_PAGE,"FIRST_PAGE");
	HX_MARK_MEMBER_NAME(PageFlag_obj::LAST_PAGE,"LAST_PAGE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PageFlag_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PageFlag_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PageFlag_obj::CONTINUED_PACKET,"CONTINUED_PACKET");
	HX_VISIT_MEMBER_NAME(PageFlag_obj::FIRST_PAGE,"FIRST_PAGE");
	HX_VISIT_MEMBER_NAME(PageFlag_obj::LAST_PAGE,"LAST_PAGE");
};

#endif

hx::Class PageFlag_obj::__mClass;

static ::String PageFlag_obj_sStaticFields[] = {
	HX_HCSTRING("CONTINUED_PACKET","\xca","\x14","\x58","\x3c"),
	HX_HCSTRING("FIRST_PAGE","\x1e","\xd4","\xef","\x06"),
	HX_HCSTRING("LAST_PAGE","\x18","\xb4","\x0d","\x1f"),
	::String(null())
};

void PageFlag_obj::__register()
{
	hx::Object *dummy = new PageFlag_obj;
	PageFlag_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("stb.format.vorbis.data.PageFlag","\x6e","\xb3","\x36","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PageFlag_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PageFlag_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PageFlag_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PageFlag_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PageFlag_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PageFlag_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PageFlag_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b839a4ecc9292a24_57_boot)
HXLINE(  57)		CONTINUED_PACKET = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b839a4ecc9292a24_58_boot)
HXLINE(  58)		FIRST_PAGE = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b839a4ecc9292a24_59_boot)
HXLINE(  59)		LAST_PAGE = (int)4;
            	}
}

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data
