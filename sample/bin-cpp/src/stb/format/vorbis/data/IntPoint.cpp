// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#include <hxcpp.h>

#ifndef INCLUDED_stb_format_vorbis_data_IntPoint
#include <stb/format/vorbis/data/IntPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f8792a7fe9c3bf00_12_new,"stb.format.vorbis.data.IntPoint","new",0x6d12ada6,"stb.format.vorbis.data.IntPoint.new","stb/format/vorbis/data/IntPoint.hx",12,0x773c5a0a)
namespace stb{
namespace format{
namespace vorbis{
namespace data{

void IntPoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f8792a7fe9c3bf00_12_new)
            	HX_STACK_THIS(this)
            	}

Dynamic IntPoint_obj::__CreateEmpty() { return new IntPoint_obj; }

void *IntPoint_obj::_hx_vtable = 0;

Dynamic IntPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntPoint_obj > _hx_result = new IntPoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IntPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36d6dcd6;
}


IntPoint_obj::IntPoint_obj()
{
}

hx::Val IntPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IntPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IntPoint_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(IntPoint_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(IntPoint_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IntPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String IntPoint_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	::String(null()) };

static void IntPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntPoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntPoint_obj::__mClass,"__mClass");
};

#endif

hx::Class IntPoint_obj::__mClass;

void IntPoint_obj::__register()
{
	hx::Object *dummy = new IntPoint_obj;
	IntPoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("stb.format.vorbis.data.IntPoint","\xb4","\xa2","\xbd","\x9d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntPoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IntPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IntPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data
