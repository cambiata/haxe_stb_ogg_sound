// Generated by Haxe 3.4.0 (git build development @ 75c0f05)
#include <hxcpp.h>

#ifndef INCLUDED_stb_format_vorbis_data_Setting
#include <stb/format/vorbis/data/Setting.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_958a01e4d84b5502_9_boot,"stb.format.vorbis.data.Setting","boot",0xa13e5b23,"stb.format.vorbis.data.Setting.boot","stb/format/vorbis/data/Setting.hx",9,0x446a8241)
HX_DEFINE_STACK_FRAME(_hx_pos_958a01e4d84b5502_10_boot,"stb.format.vorbis.data.Setting","boot",0xa13e5b23,"stb.format.vorbis.data.Setting.boot","stb/format/vorbis/data/Setting.hx",10,0x446a8241)
HX_DEFINE_STACK_FRAME(_hx_pos_958a01e4d84b5502_11_boot,"stb.format.vorbis.data.Setting","boot",0xa13e5b23,"stb.format.vorbis.data.Setting.boot","stb/format/vorbis/data/Setting.hx",11,0x446a8241)
HX_DEFINE_STACK_FRAME(_hx_pos_958a01e4d84b5502_12_boot,"stb.format.vorbis.data.Setting","boot",0xa13e5b23,"stb.format.vorbis.data.Setting.boot","stb/format/vorbis/data/Setting.hx",12,0x446a8241)
HX_DEFINE_STACK_FRAME(_hx_pos_958a01e4d84b5502_13_boot,"stb.format.vorbis.data.Setting","boot",0xa13e5b23,"stb.format.vorbis.data.Setting.boot","stb/format/vorbis/data/Setting.hx",13,0x446a8241)
namespace stb{
namespace format{
namespace vorbis{
namespace data{

void Setting_obj::__construct() { }

Dynamic Setting_obj::__CreateEmpty() { return new Setting_obj; }

void *Setting_obj::_hx_vtable = 0;

Dynamic Setting_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Setting_obj > _hx_result = new Setting_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Setting_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x390dcf3b;
}

int Setting_obj::MAX_CHANNELS;

int Setting_obj::PUSHDATA_CRC_COUNT;

int Setting_obj::FAST_HUFFMAN_LENGTH;

int Setting_obj::FAST_HUFFMAN_TABLE_SIZE;

int Setting_obj::FAST_HUFFMAN_TABLE_MASK;


Setting_obj::Setting_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Setting_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Setting_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Setting_obj::MAX_CHANNELS,HX_HCSTRING("MAX_CHANNELS","\xab","\x9a","\xb0","\xa4")},
	{hx::fsInt,(void *) &Setting_obj::PUSHDATA_CRC_COUNT,HX_HCSTRING("PUSHDATA_CRC_COUNT","\x69","\x37","\x15","\xf6")},
	{hx::fsInt,(void *) &Setting_obj::FAST_HUFFMAN_LENGTH,HX_HCSTRING("FAST_HUFFMAN_LENGTH","\x9b","\x48","\x12","\xdb")},
	{hx::fsInt,(void *) &Setting_obj::FAST_HUFFMAN_TABLE_SIZE,HX_HCSTRING("FAST_HUFFMAN_TABLE_SIZE","\x27","\x9c","\xff","\x32")},
	{hx::fsInt,(void *) &Setting_obj::FAST_HUFFMAN_TABLE_MASK,HX_HCSTRING("FAST_HUFFMAN_TABLE_MASK","\x52","\x3c","\x02","\x2f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Setting_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Setting_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Setting_obj::MAX_CHANNELS,"MAX_CHANNELS");
	HX_MARK_MEMBER_NAME(Setting_obj::PUSHDATA_CRC_COUNT,"PUSHDATA_CRC_COUNT");
	HX_MARK_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_LENGTH,"FAST_HUFFMAN_LENGTH");
	HX_MARK_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_SIZE,"FAST_HUFFMAN_TABLE_SIZE");
	HX_MARK_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_MASK,"FAST_HUFFMAN_TABLE_MASK");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Setting_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Setting_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Setting_obj::MAX_CHANNELS,"MAX_CHANNELS");
	HX_VISIT_MEMBER_NAME(Setting_obj::PUSHDATA_CRC_COUNT,"PUSHDATA_CRC_COUNT");
	HX_VISIT_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_LENGTH,"FAST_HUFFMAN_LENGTH");
	HX_VISIT_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_SIZE,"FAST_HUFFMAN_TABLE_SIZE");
	HX_VISIT_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_MASK,"FAST_HUFFMAN_TABLE_MASK");
};

#endif

hx::Class Setting_obj::__mClass;

static ::String Setting_obj_sStaticFields[] = {
	HX_HCSTRING("MAX_CHANNELS","\xab","\x9a","\xb0","\xa4"),
	HX_HCSTRING("PUSHDATA_CRC_COUNT","\x69","\x37","\x15","\xf6"),
	HX_HCSTRING("FAST_HUFFMAN_LENGTH","\x9b","\x48","\x12","\xdb"),
	HX_HCSTRING("FAST_HUFFMAN_TABLE_SIZE","\x27","\x9c","\xff","\x32"),
	HX_HCSTRING("FAST_HUFFMAN_TABLE_MASK","\x52","\x3c","\x02","\x2f"),
	::String(null())
};

void Setting_obj::__register()
{
	hx::Object *dummy = new Setting_obj;
	Setting_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("stb.format.vorbis.data.Setting","\x1d","\xef","\xa2","\xf4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Setting_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Setting_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Setting_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Setting_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Setting_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Setting_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Setting_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_958a01e4d84b5502_9_boot)
HXLINE(   9)		MAX_CHANNELS = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_958a01e4d84b5502_10_boot)
HXLINE(  10)		PUSHDATA_CRC_COUNT = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_958a01e4d84b5502_11_boot)
HXLINE(  11)		FAST_HUFFMAN_LENGTH = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_958a01e4d84b5502_12_boot)
HXLINE(  12)		FAST_HUFFMAN_TABLE_SIZE = (int)1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_958a01e4d84b5502_13_boot)
HXLINE(  13)		FAST_HUFFMAN_TABLE_MASK = (int)1023;
            	}
}

} // end namespace stb
} // end namespace format
} // end namespace vorbis
} // end namespace data
